// server.js
const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
require('dotenv').config();

// Initialize Express app
const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.log('MongoDB connection error:', err));

// User schema
const userSchema = new mongoose.Schema({
    username: String,
    password: String,
});

const User = mongoose.model('User', userSchema);

// Workout schema
const workoutSchema = new mongoose.Schema({
    userId: mongoose.Schema.Types.ObjectId,
    name: String,
    details: String,
    calories: Number,
    hours: Number,
    date: Date,
});

const Workout = mongoose.model('Workout', workoutSchema);

// Signup route
app.post('/signup', async (req, res) => {
    const { username, password } = req.body;
    
    const existingUser = await User.findOne({ username });
    if (existingUser) return res.status(400).json({ message: 'User already exists' });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ username, password: hashedPassword });
    
    await newUser.save();
    res.status(201).json({ message: 'User created successfully' });
});

// Login route
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    
    const user = await User.findOne({ username });
    if (!user) return res.status(400).json({ message: 'User not found' });

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) return res.status(400).json({ message: 'Invalid password' });

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ message: 'Login successful', token });
});

// Add workout plan
app.post('/workout', async (req, res) => {
    const { token, name, details, calories, hours, date } = req.body;

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.userId;

        const newWorkout = new Workout({
            userId,
            name,
            details,
            calories,
            hours,
            date,
        });

        await newWorkout.save();
        res.status(201).json({ message: 'Workout added successfully' });
    } catch (err) {
        res.status(400).json({ message: 'Invalid token' });
    }
});

// Get user's workout plan
app.get('/workout', async (req, res) => {
    const { token } = req.query;
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.userId;

        const workouts = await Workout.find({ userId });
        res.status(200).json(workouts);
    } catch (err) {
        res.status(400).json({ message: 'Invalid token' });
    }
});

// Listen on port 5000
app.listen(5000, () => console.log('Server running on port 5000'));
